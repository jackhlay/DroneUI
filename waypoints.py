from pymavlink import mavutil
import math
import tkinter as tk
import MVC
import pytest
from tkintermapview import TkinterMapView
from PIL import Image, ImageTk

def get_distance_global(current_lat, current_lon, target_lat, target_lon):
    #return the distance between current position and target position in centimeters
    #does not account for the curvature of the earth

    delta_lat = target_lat - current_lat
    delta_lon = target_lon - current_lon
    distance  = math.sqrt(delta_lat ** 2 + delta_lon ** 2) #formula for euclidean distance between 2 points
    return distance 


def connect(port):
    print("Attempting to connect on port %d" % port)

    connection = mavutil.mavlink_connection('udpin:0.0.0.0:%d' % port) 

    connection.wait_heartbeat() #wait until we hear a heartbeat from the copter

    print("Connection success")
    print("Heartbeat from system (system %u component %u)" % (connection.target_system, connection.target_component))

    return connection 

def takeoff(connection, takeoff_alt):
    #set copter to guided mode
    connection.mav.set_mode_send(connection.target_system, mavutil.mavlink.MAV_MODE_FLAG_CUSTOM_MODE_ENABLED, 4) 

    #arm throttle
    connection.mav.command_long_send(connection.target_system, connection.target_component, 
                                 mavutil.mavlink.MAV_CMD_COMPONENT_ARM_DISARM, 0, 1, 0, 0, 0, 0, 0, 0)

    msg = connection.recv_match(type = 'COMMAND_ACK', blocking = True)
    print(msg) #"result: 0" if it executed without error. If you get result: 4, you probably need to set the copter to guided mode.

    #send takeoff command to target altitude.
    connection.mav.command_long_send(connection.target_system, connection.target_component, 
                                 mavutil.mavlink.MAV_CMD_NAV_TAKEOFF, 0, 0, 0, 0, 0, 0, 0, takeoff_alt)

    msg = connection.recv_match(type = 'COMMAND_ACK', blocking = True)
    print(msg)

    #loop until copter reaches takeoff altitude
    while 1:
        # Wait for the next LOCAL_POSITION_NED message
        msg = connection.recv_match(type='LOCAL_POSITION_NED', blocking=True)
    
        # Check if altitude is within a threshold of the target altitude
        if abs(msg.z * -1 - takeoff_alt) < 1.0:
            print("Reached target altitude")
            break

def land(connection): 
    connection.mav.command_long_send(connection.target_system, connection.target_component, 
                                mavutil.mavlink.MAV_CMD_NAV_LAND, 0, 0, 0, 0, 0, 0, 0, 0)

#send local frame coordinates and have copter fly over that spot.

def send_waypoint_local(connection, x, y, alt):
    connection.mav.send(mavutil.mavlink.MAVLink_set_position_target_local_ned_message
                    (10, connection.target_system, connection.target_component, mavutil.mavlink.MAV_FRAME_LOCAL_NED, 
                     int(0b010111111000), x, y, alt,
                      0, 0, 0, 0, 0, 0, 0, 0))
    while 1:
        msg = connection.recv_match(type = 'LOCAL_POSITION_NED', blocking = True)

        current_x = msg.x 
        current_y = msg.y
        current_z = msg.z

        distance = get_distance_global(current_x, current_y, x, y)

        print("Current distance %d" % distance)

        if(distance <= 10): #break when we are within 50 cm of target
            print("target waypoint reached")
            break

#send global gps coordinates and altitude, and have copter fly over that spot. 
def send_waypoint_global(connection, lat, lon, alt):
    connection.mav.send(mavutil.mavlink.MAVLink_set_position_target_global_int_message
                    (10, connection.target_system, connection.target_component, mavutil.mavlink.MAV_FRAME_GLOBAL_RELATIVE_ALT, 
                     int(0b110111111000), int(lat), int(lon), alt, 0, 0, 0, 0, 0, 0, 0, 0))
    #loop until we reach target waypoint
    i = 0
    while 1:
        i += 1
        msg = connection.recv_match(type = 'GLOBAL_POSITION_INT', blocking = True)

        current_lat = msg.lat 
        current_lon = msg.lon

        distance = get_distance_global(current_lat, current_lon, lat, lon)

        print("Current distance %d" % distance)

        if(distance <= 25): #break when we are within 50 cm of target
            print("target waypoint reached")
            break

#parse through the array of coordinates generated by the MVC and fly to each point
def process_planArr(connection, planArr, alt):
    print("sending takeoff command")
    takeoff(connection, alt)
    for lat, lon in planArr:
        print("Going to lat: %s lon: %s" % (lat, lon))
        send_waypoint_global(connection, float(lat) *1e7, float(lon) *1e7, alt)

    send_waypoint_local(connection, 0,0,0)
    land(connection)

def isInRange(takeoff_lat, takeoff_lon, target_lat, target_lon):
    if (get_distance_global(takeoff_lat, takeoff_lon, target_lat, target_lon) > 40000):
        print("Coordinate entered is out of range")
        return False
    else:
        return True

def testIsInRange():
    assert isInRange(-100.0000000, -100.0000000, 100.0000000, 100.0000000) == False
    assert isInRange(100.0000000, 100.0000000, 100.0000001, 100.0000001) == True

#Main code:
root = tk.Tk()
app = MVC.Controller(root)
root.mainloop()
planArr = app.planArr

print("waypoints to visit:")
print(planArr)

drone_connection = connect(14550)

process_planArr(drone_connection, planArr, 10)
send_waypoint_local(drone_connection, 0, 0, 40)
#land(drone_connection)